     1                                  ;*****************************************************************************************************************************
     2                                  ;Program name: "Perimeter of Rectangle".  This program demonstrates the input of a width and length of sides to a rectangle. *
     3                                  ;Then calculation with addition and division to calculate the perimter of the rectangle as well as the average length of all *
     4                                  ;sides of the rectangle.  Copyright (C) 2021 Stefan Parrish.                                                                 *
     5                                  ;                                                                                                                            *
     6                                  ;This file is part of the software program "Perimeter of Rectangle".                                                         *
     7                                  ;Perimeter of Rectangle is free software: you can redistribute it and/or modify it under the terms of the                    *
     8                                  ;GNU General Public License version 3 as published by the Free Software Foundation.                                          *
     9                                  ;Perimeter of Rectangle is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied*
    10                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.      *
    11                                  ;A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.                             *
    12                                  ;*****************************************************************************************************************************
    13                                  
    14                                  
    15                                  
    16                                  
    17                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    18                                  ;
    19                                  ;Author information
    20                                  ;  Author name: Stefan Parrish
    21                                  ;  Author email: parrishstefan@fullerton.edu
    22                                  ;
    23                                  ;Program information
    24                                  ;  Program name: Perimeter of Retangle
    25                                  ;  Programming languages: One modules in C and one module in X86
    26                                  ;  Date program began: 2021-Feb-2
    27                                  ;  Date of last update: 2021-Feb-10
    28                                  ;  Date of reorganization of comments: 2021-Feb-10
    29                                  ;  Files in this program: manageio.c, assignment1.asm
    30                                  ;  Status: Finished.  The program was tested extensively with no errors in Ubuntu20.04.
    31                                  ;
    32                                  ;This file
    33                                  ;   File name: assignment1.asm
    34                                  ;   Language: X86 with Intel syntax.
    35                                  ;   Max page width: 132 columns
    36                                  ;   Assemble: nasm -f elf64 -l assignment1.lis -o assignment1.o assignment1.asm
    37                                  
    38                                  
    39                                  ;===== Begin code area ================================================================================================
    40                                  extern printf
    41                                  extern scanf
    42                                  global floatio
    43                                  
    44                                  
    45                                  segment .data
    46 00000000 57656C636F6D652074-     welcome db "Welcome to an friendly assembly program by Stefan Parrish.",10,0
    46 00000009 6F20616E2066726965-
    46 00000012 6E646C792061737365-
    46 0000001B 6D626C792070726F67-
    46 00000024 72616D206279205374-
    46 0000002D 6566616E2050617272-
    46 00000036 6973682E0A00       
    47 0000003C 546869732070726F67-     welcome2 db "This program will compute the perimeter and the average side length of a rectangle.",10,0
    47 00000045 72616D2077696C6C20-
    47 0000004E 636F6D707574652074-
    47 00000057 686520706572696D65-
    47 00000060 74657220616E642074-
    47 00000069 686520617665726167-
    47 00000072 652073696465206C65-
    47 0000007B 6E677468206F662061-
    47 00000084 2072656374616E676C-
    47 0000008D 652E0A00           
    48                                  
    49                                  ;Prompt for user to input height and width
    50 00000091 456E74657220746865-     inputheightprompt db "Enter the height: ",0
    50 0000009A 206865696768743A20-
    50 000000A3 00                 
    51 000000A4 456E74657220612077-     inputwidthprompt db "Enter a width: ",0
    51 000000AD 696474683A2000     
    52                                  
    53                                  ;Output for calculations of perimeter and average length of sides
    54 000000B4 54686520706572696D-     perimeteroutput db "The perimeter is %5.3lf",10,0
    54 000000BD 657465722069732025-
    54 000000C6 352E336C660A00     
    55 000000CD 546865206C656E6774-     averagesideoutput db "The length of the average side is %5.3lf",10,0
    55 000000D6 68206F662074686520-
    55 000000DF 617665726167652073-
    55 000000E8 696465206973202535-
    55 000000F1 2E336C660A00       
    56                                  
    57 000000F7 4920686F706520796F-     good_bye db "I hope you enjoyed your rectangle",10,0
    57 00000100 7520656E6A6F796564-
    57 00000109 20796F757220726563-
    57 00000112 74616E676C650A00   
    58 0000011A 54686520617373656D-     good_bye2 db "The assembly program will send the perimeter to the main function.",10,0
    58 00000123 626C792070726F6772-
    58 0000012C 616D2077696C6C2073-
    58 00000135 656E64207468652070-
    58 0000013E 6572696D6574657220-
    58 00000147 746F20746865206D61-
    58 00000150 696E2066756E637469-
    58 00000159 6F6E2E0A00         
    59                                  
    60                                  ;Format for inputs for width/height given by user
    61 0000015E 256C6600                one_float_format db "%lf",0
    62                                  
    63                                  segment .bss  ;Reserved for uninitialized data
    64                                  
    65                                  segment .text ;Reserved for executing instructions.
    66                                  
    67                                  floatio:
    68                                  
    69                                  ;Prolog ===== Insurance for any caller of this assembly module ========================================================
    70                                  ;Any future program calling this module that the data in the caller's GPRs will not be modified.
    71 00000000 55                      push rbp
    72 00000001 4889E5                  mov  rbp,rsp
    73 00000004 57                      push rdi                                                    ;Backup rdi
    74 00000005 56                      push rsi                                                    ;Backup rsi
    75 00000006 52                      push rdx                                                    ;Backup rdx
    76 00000007 51                      push rcx                                                    ;Backup rcx
    77 00000008 4150                    push r8                                                     ;Backup r8
    78 0000000A 4151                    push r9                                                     ;Backup r9
    79 0000000C 4152                    push r10                                                    ;Backup r10
    80 0000000E 4153                    push r11                                                    ;Backup r11
    81 00000010 4154                    push r12                                                    ;Backup r12
    82 00000012 4155                    push r13                                                    ;Backup r13
    83 00000014 4156                    push r14                                                    ;Backup r14
    84 00000016 4157                    push r15                                                    ;Backup r15
    85 00000018 53                      push rbx                                                    ;Backup rbx
    86 00000019 9C                      pushf                                                       ;Backup rflags
    87                                  
    88                                  ;Registers rax, rip, and rsp are usually not backed up.
    89 0000001A 6A00                    push qword 0
    90                                  
    91                                  
    92                                  ;Display a welcome message to the viewer.
    93 0000001C B800000000              mov rax, 0                     ;A zero in rax means printf uses no data from xmm registers.
    94 00000021 48BF-                   mov rdi, welcome
    94 00000023 [0000000000000000] 
    95 0000002B E8(00000000)            call printf
    96 00000030 B800000000              mov rax, 0                     ;A zero in rax means printf uses no data from xmm registers.
    97 00000035 48BF-                   mov rdi, welcome2
    97 00000037 [3C00000000000000] 
    98 0000003F E8(00000000)            call printf
    99                                  
   100                                  
   101                                  ;============= Begin section to input two float numbers using one call to scanf =======================================
   102                                  ;Display a prompt message asking for inputs
   103                                  
   104 00000044 6A00                    push qword 0
   105                                  ;Display a prompt message asking for input for height of rectangle
   106 00000046 B800000000              mov rax, 0
   107 0000004B 48BF-                   mov rdi, inputheightprompt
   107 0000004D [9100000000000000] 
   108 00000055 E8(00000000)            call printf
   109 0000005A 58                      pop rax
   110                                  
   111 0000005B 6A00                    push qword 0
   112 0000005D B800000000              mov rax, 0
   113 00000062 48BF-                   mov rdi, one_float_format
   113 00000064 [5E01000000000000] 
   114 0000006C 4889E6                  mov rsi, rsp
   115 0000006F E8(00000000)            call scanf
   116 00000074 F2440F101424            movsd xmm10, [rsp]
   117 0000007A 58                      pop rax
   118                                  
   119 0000007B 6A00                    push qword 0
   120                                  ;Display a prompt message asking for input for width of rectangle
   121 0000007D B800000000              mov rax, 0
   122 00000082 48BF-                   mov rdi, inputwidthprompt
   122 00000084 [A400000000000000] 
   123 0000008C E8(00000000)            call printf
   124 00000091 58                      pop rax
   125                                  
   126 00000092 6A00                    push qword 0
   127 00000094 B800000000              mov rax, 0
   128 00000099 48BF-                   mov rdi, one_float_format
   128 0000009B [5E01000000000000] 
   129 000000A3 4889E6                  mov rsi, rsp
   130 000000A6 E8(00000000)            call scanf
   131 000000AB F2440F101C24            movsd xmm11, [rsp]
   132 000000B1 58                      pop rax
   133                                  
   134                                  ;Calculates perimeter of rectangle
   135 000000B2 F2450F10E2              movsd xmm12, xmm10
   136 000000B7 F2450F58E3              addsd xmm12, xmm11
   137 000000BC F2450F58E4              addsd xmm12, xmm12
   138 000000C1 6A63                    push qword 99
   139 000000C3 B801000000              mov rax, 1
   140 000000C8 48BF-                   mov rdi, perimeteroutput
   140 000000CA [B400000000000000] 
   141 000000D2 F2410F10C4              movsd xmm0, xmm12
   142 000000D7 E8(00000000)            call printf
   143 000000DC 58                      pop rax
   144                                  
   145                                  ;Calculates average length of sides of rectangle
   146 000000DD 41BF04000000            mov r15, 4
   147                                  ;converts r->xmm to be able to divide by constant
   148 000000E3 F24D0F2AEF              cvtsi2sd xmm13, r15
   149 000000E8 F2450F10F4              movsd xmm14, xmm12
   150 000000ED F2450F5EF5              divsd xmm14, xmm13
   151 000000F2 6A63                    push qword 99
   152 000000F4 B801000000              mov rax, 1                     ;printf will need access to thhis many
   153 000000F9 48BF-                   mov rdi, averagesideoutput     
   153 000000FB [CD00000000000000] 
   154 00000103 F2410F10C6              movsd xmm0, xmm14
   155 00000108 E8(00000000)            call printf
   156 0000010D 58                      pop rax
   157                                  
   158                                  ;============= End of section to input two float numbers ==============================================================
   159                                  
   160                                  
   161                                  ;============= Prepare to exit from this program ======================================================================
   162                                  
   163                                  ;Display good-bye message (the next block of instructions)
   164 0000010E B800000000              mov rax, 0
   165 00000113 48BF-                   mov rdi, good_bye
   165 00000115 [F700000000000000] 
   166 0000011D E8(00000000)            call printf
   167 00000122 B800000000              mov rax, 0
   168 00000127 48BF-                   mov rdi, good_bye2
   168 00000129 [1A01000000000000] 
   169 00000131 E8(00000000)            call printf
   170                                  
   171 00000136 58                      pop rax                        ;Reverse the push near the beginning of this asm function.
   172                                  
   173 00000137 F2410F10C4              movsd xmm0, xmm12
   174                                  
   175                                  ;===== Restore original values to integer registers ===================================================================
   176 0000013C 9D                      popf                                                        ;Restore rflags
   177 0000013D 5B                      pop rbx                                                     ;Restore rbx
   178 0000013E 415F                    pop r15                                                     ;Restore r15
   179 00000140 415E                    pop r14                                                     ;Restore r14
   180 00000142 415D                    pop r13                                                     ;Restore r13
   181 00000144 415C                    pop r12                                                     ;Restore r12
   182 00000146 415B                    pop r11                                                     ;Restore r11
   183 00000148 415A                    pop r10                                                     ;Restore r10
   184 0000014A 4159                    pop r9                                                      ;Restore r9
   185 0000014C 4158                    pop r8                                                      ;Restore r8
   186 0000014E 59                      pop rcx                                                     ;Restore rcx
   187 0000014F 5A                      pop rdx                                                     ;Restore rdx
   188 00000150 5E                      pop rsi                                                     ;Restore rsi
   189 00000151 5F                      pop rdi                                                     ;Restore rdi
   190 00000152 5D                      pop rbp                                                     ;Restore rbp
   191                                  
   192 00000153 C3                      ret
   193                                  
   194                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
