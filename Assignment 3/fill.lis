     1                                  ;********************************************************************************************
     2                                  ; Program name:          Assignment 3 - Sum of an Array                                     *
     3                                  ; Programming Language:  x86 Assembly                                                       *
     4                                  ; Program Description:   This program asks a user to input floats into an array and         *
     5                                  ;                        returns the sum of floats in the array.                            *
     6                                  ;                                                                                           *
     7                                  ;********************************************************************************************
     8                                  ; Author Information:                                                                       *
     9                                  ; Name:         Stefan Parrish                                                              *
    10                                  ; Email:        parrishstefan@csu.fullerton.edu                                             *    
    11                                  ; Institution:  California State University - Fullerton                                     *
    12                                  ; Course:       CPSC 240-07 Assembly Language                                               *
    13                                  ;                                                                                           *
    14                                  ;********************************************************************************************
    15                                  ; Copyright (C) 2021 Stefan Parrish                                                         *
    16                                  ; This program is free software: you can redistribute it and/or modify it under the terms   * 
    17                                  ; of the GNU General Public License version 3 as published by the Free Software Foundation. * 
    18                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
    19                                  ; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * 
    20                                  ; See the GNU General Public License for more details. A copy of the GNU General Public     *
    21                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    22                                  ;                                                                                           *
    23                                  ;********************************************************************************************
    24                                  ; Program information                                                                       *
    25                                  ;   Program name: Assignment 3 - Sum of an Array                                            *
    26                                  ;   Programming languages: One module in C, Three modules in X86, One modules in c++        *
    27                                  ;   Files in this program: control.asm, fill.asm, sum.asm, display.cpp, main.c,             *   
    28                                  ;                                                                                           *
    29                                  ;********************************************************************************************
    30                                  ; This File                                                                                 *
    31                                  ;    Name:      fill.asm                                                                   *
    32                                  ;    Purpose:   Takes float value inputs from user and puts them into an array and returns  *
    33                                  ;               the total number of inputs to control                                       *
    34                                  ;                                                                                           *
    35                                  ;********************************************************************************************
    36                                  
    37                                  extern printf
    38                                  extern scanf
    39                                  
    40                                  global fill                       ; Makes function callable from other linked files.
    41                                  
    42                                  section .data
    43                                  
    44 00000000 256C6600                    inputDbl db "%lf", 0
    45 00000004 506C6561736520656E-         instructions db "Please enter floating point numbers separated by ws",10,0
    45 0000000D 74657220666C6F6174-
    45 00000016 696E6720706F696E74-
    45 0000001F 206E756D6265727320-
    45 00000028 736570617261746564-
    45 00000031 2062792077730A00   
    46 00000039 5768656E2066696E69-         instructions2 db "When finished press enter followed by Ctrl+D.",10,0
    46 00000042 736865642070726573-
    46 0000004B 7320656E7465722066-
    46 00000054 6F6C6C6F7765642062-
    46 0000005D 79204374726C2B442E-
    46 00000066 0A00               
    47                                      
    48                                  section .bss
    49                                  
    50                                  section .text
    51                                  
    52                                  fill:
    53                                  
    54                                  ; Back up all registers and set stack pointer to base pointer
    55 00000000 55                      push rbp
    56 00000001 4889E5                  mov rbp, rsp
    57 00000004 57                      push rdi
    58 00000005 56                      push rsi
    59 00000006 52                      push rdx
    60 00000007 51                      push rcx
    61 00000008 4150                    push r8
    62 0000000A 4151                    push r9
    63 0000000C 4152                    push r10
    64 0000000E 4153                    push r11
    65 00000010 4154                    push r12
    66 00000012 4155                    push r13
    67 00000014 4156                    push r14
    68 00000016 4157                    push r15
    69 00000018 53                      push rbx
    70                                  
    71 00000019 6AFF                    push qword -1                           ; Extra push to create even number of pushes
    72                                  
    73                                  ;-----------------------------INITIALIZE PARAMETERS-----------------------------------------
    74 0000001B 4989FF                  mov r15, rdi                      ; Address of array saved to r15.
    75 0000001E 4989F6                  mov r14, rsi                      ; Max number of elements allowed in array.
    76 00000021 41BD00000000            mov r13, 0                        ; Counter to iterate through array.
    77                                  
    78                                  ;-----------------------------OUTPUT PROMPT-------------------------------------------------
    79 00000027 6A00                    push qword 0
    80 00000029 B800000000              mov rax, 0                    
    81 0000002E 48BF-                   mov rdi, instructions
    81 00000030 [0400000000000000] 
    82 00000038 E8(00000000)            call printf                             ; Print out intructionS prompt.
    83 0000003D 58                      pop rax
    84                                  
    85 0000003E 6A00                    push qword 0
    86 00000040 B800000000              mov rax, 0                    
    87 00000045 48BF-                   mov rdi, instructions2
    87 00000047 [3900000000000000] 
    88 0000004F E8(00000000)            call printf                             ; Print out intructionS prompt.
    89 00000054 58                      pop rax
    90                                  
    91                                  ;---------------------------------START OF LOOP---------------------------------------------
    92                                  begin_loop:
    93                                  
    94                                  ; Scanf function called to take user input.
    95 00000055 6A00                    push qword 0
    96 00000057 B800000000              mov rax, 0
    97 0000005C 48BF-                   mov rdi, inputDbl  
    97 0000005E [0000000000000000] 
    98 00000066 4889E6                  mov rsi, rsp                            ; Stack pointer points to where scanf outputs
    99 00000069 E8(00000000)            call scanf
   100 0000006E F2440F101C24            movsd xmm11, [rsp]
   101 00000074 4158                    pop r8
   102                                  
   103                                  ; Test if Control + D is entered to finish inputting into array.
   104 00000076 4898                    cdqe
   105 00000078 4883F8FF                cmp rax, -1                          
   106 0000007C 740E                    je end_loop                             ; Exit loop if control + D is pressed.
   107                                  
   108                                  ;--------------------------------COPY INTO ARRAY--------------------------------------------
   109 0000007E F2470F111CEF            movsd [r15 + 8 * r13], xmm11            ; Copy user input into array at index r13.
   110                                  
   111 00000084 49FFC5                  inc r13                                 ; Increment array index.
   112                                  
   113                                  ;-----------------------------ARRAY CAPACITY TEST-------------------------------------------
   114                                  ; Test to see if max array capacity has been reached.
   115 00000087 4D39F5                  cmp r13, r14
   116 0000008A 75C9                    jne begin_loop                          ; Loop until R13=R14.
   117                                  
   118                                  ;---------------------------------END OF LOOP-----------------------------------------------
   119                                  end_loop:
   120                                  
   121                                  ; Restore all backed up registers to their original state.
   122 0000008C 58                      pop rax                                 ; Remove extra push of -1 from stack.
   123 0000008D 4C89E8                  mov rax, r13                            ; Copy # of elements in r13 to rax.
   124                                  
   125 00000090 5B                      pop rbx                                                     
   126 00000091 415F                    pop r15                                                     
   127 00000093 415E                    pop r14                                                      
   128 00000095 415D                    pop r13                                                      
   129 00000097 415C                    pop r12                                                      
   130 00000099 415B                    pop r11                                                     
   131 0000009B 415A                    pop r10                                                     
   132 0000009D 4159                    pop r9                                                      
   133 0000009F 4158                    pop r8                                                      
   134 000000A1 59                      pop rcx                                                     
   135 000000A2 5A                      pop rdx                                                     
   136 000000A3 5E                      pop rsi                                                     
   137 000000A4 5F                      pop rdi                                                     
   138 000000A5 5D                      pop rbp
   139                                  
   140 000000A6 C3                      ret
