     1                                  ;********************************************************************************************
     2                                  ; Program name:          Assignment 3 - Sum of an Array                                     *
     3                                  ; Programming Language:  x86 Assembly                                                       *
     4                                  ; Program Description:   This program asks a user to input floats into an array and         *
     5                                  ;                        returns the sum of floats in the array.                            *
     6                                  ;                                                                                           *
     7                                  ;********************************************************************************************
     8                                  ; Author Information:                                                                       *
     9                                  ; Name:         Stefan Parrish                                                              *
    10                                  ; Email:        parrishstefan@csu.fullerton.edu                                             *    
    11                                  ; Institution:  California State University - Fullerton                                     *
    12                                  ; Course:       CPSC 240-07 Assembly Language                                               *
    13                                  ;                                                                                           *
    14                                  ;********************************************************************************************
    15                                  ; Copyright (C) 2021 Stefan Parrish                                                         *
    16                                  ; This program is free software: you can redistribute it and/or modify it under the terms   * 
    17                                  ; of the GNU General Public License version 3 as published by the Free Software Foundation. * 
    18                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
    19                                  ; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * 
    20                                  ; See the GNU General Public License for more details. A copy of the GNU General Public     *
    21                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    22                                  ;                                                                                           *
    23                                  ;********************************************************************************************
    24                                  ; Program information                                                                       *
    25                                  ;   Program name: Assignment 3 - Sum of an Array                                            *
    26                                  ;   Programming languages: One module in C, Three modules in X86, One modules in c++        *
    27                                  ;   Files in this program: control.asm, fill.asm, sum.asm, display.cpp, main.c,             *   
    28                                  ;                                                                                           *
    29                                  ;********************************************************************************************
    30                                  ; This File                                                                                 *
    31                                  ;    Name:      sum.asm                                                                     *
    32                                  ;    Purpose:   Adds up all float values in the array and returns the sum to control        *
    33                                  ;                                                                                           *
    34                                  ;********************************************************************************************
    35                                  intial_value equ 0
    36                                  global sum                             ; Makes function callable from other linked files.
    37                                  extern printf
    38                                  
    39                                  section .data  
    40                                      ;giveZero dd 0
    41                                  
    42                                  section .bss
    43                                  
    44                                  section .text
    45                                  
    46                                  sum:
    47                                  
    48                                  ; Back up all registers to stack and set stack pointer to base pointer
    49 00000000 55                      push rbp
    50 00000001 4889E5                  mov rbp, rsp
    51 00000004 57                      push rdi
    52 00000005 56                      push rsi
    53 00000006 52                      push rdx
    54 00000007 51                      push rcx
    55 00000008 4150                    push r8
    56 0000000A 4151                    push r9
    57 0000000C 4152                    push r10
    58 0000000E 4153                    push r11
    59 00000010 4154                    push r12
    60 00000012 4155                    push r13
    61 00000014 4156                    push r14
    62 00000016 4157                    push r15
    63 00000018 53                      push rbx
    64 00000019 9C                      pushf
    65                                  
    66 0000001A 6AFF                    push qword -1                           ; Extra push onto stack to make even # of pushes.
    67                                  
    68 0000001C 4989FF                  mov r15, rdi                            ; Copies array that was passed to r15.
    69 0000001F 4989F6                  mov r14, rsi                            ; Copies number of elements in the array to r14.
    70 00000022 41BD00000000            mov r13, 0                              ; Sum register to add elements of array to.
    71 00000028 41BC00000000            mov r12, 0                              ; Counter to to iterate through array.
    72 0000002E 41BB00000000            mov r11, intial_value
    73 00000034 F24D0F2ADB              cvtsi2sd xmm11, r11
    74                                  ;movsd xmm11, [giveZero]
    75                                  
    76                                  ;-----------------------------------START LOOP----------------------------------------------
    77                                  begin_loop:
    78                                  
    79                                  ; Compares the counter (r12) to the number of elements in the array (r14).
    80 00000039 4D39F4                  cmp r12, r14                        
    81 0000003C 7D0B                    jge outofloop
    82                                  
    83                                  ;--------------------------------COPY INTO ARRAY--------------------------------------------
    84                                  ; Adds element of array at index of r12 to the Sum of register r13.
    85 0000003E F2470F581CE7            addsd xmm11, [r15 + 8 * r12]            
    86 00000044 49FFC4                  inc r12                                 ; Increments counter r12 by 1.
    87                                  
    88                                  ; Restarts loop
    89 00000047 EBF0                    jmp begin_loop          
    90                                  
    91                                  ;----------------------------------END OF LOOP----------------------------------------------
    92                                  outofloop:
    93                                  
    94 00000049 F2410F10C3              movsd xmm0, xmm11
    95                                  
    96                                  ; Restores all backed up registers to their original state.
    97 0000004E 58                      pop rax                                ; Remove extra push of -1 from stack.
    98 0000004F 9D                      popf                                                       
    99 00000050 5B                      pop rbx                                                     
   100 00000051 415F                    pop r15                                                     
   101 00000053 415E                    pop r14                                                      
   102 00000055 415D                    pop r13                                                      
   103 00000057 415C                    pop r12                                                      
   104 00000059 415B                    pop r11                                                     
   105 0000005B 415A                    pop r10                                                     
   106 0000005D 4159                    pop r9                                                      
   107 0000005F 4158                    pop r8                                                      
   108 00000061 59                      pop rcx                                                     
   109 00000062 5A                      pop rdx                                                     
   110 00000063 5E                      pop rsi                                                     
   111 00000064 5F                      pop rdi                                                     
   112 00000065 5D                      pop rbp
   113                                  
   114 00000066 C3                      ret
