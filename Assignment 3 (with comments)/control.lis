     1                                  
     2                                  ;********************************************************************************************
     3                                  ; Program name:          Sum of Integers - Array                                            *
     4                                  ; Programming Language:  x86 Assembly                                                       *
     5                                  ; Program Description:   This program asks a user to input integers into an array and       *
     6                                  ;                        returns the sum of integers in the array.                          *
     7                                  ;                                                                                           *
     8                                  ;********************************************************************************************
     9                                  ; Author Information:                                                                       *
    10                                  ; Name:         Bilal El-haghassan                                                          *
    11                                  ; Email:        bilalelhaghassan@csu.fullerton.edu                                          *    
    12                                  ; Institution:  California State University - Fullerton                                     *
    13                                  ; Course:       CPSC 240-05 Assembly Language                                               *
    14                                  ;                                                                                           *
    15                                  ;********************************************************************************************
    16                                  ; Copyright (C) 2020 Bilal El-haghassan                                                     *
    17                                  ; This program is free software: you can redistribute it and/or modify it under the terms   * 
    18                                  ; of the GNU General Public License version 3 as published by the Free Software Foundation. * 
    19                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
    20                                  ; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * 
    21                                  ; See the GNU General Public License for more details. A copy of the GNU General Public     *
    22                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    23                                  ;                                                                                           *
    24                                  ;********************************************************************************************
    25                                  ; Program information                                                                       *
    26                                  ;   Program name: Sum of Integers - Array                                                   *
    27                                  ;   Programming languages: One module in C, Four modules in X86, Two modules in c++         *
    28                                  ;   Files in this program: manager.asm, input_array.asm, sum.asm, atol.asm, main.c,         *   
    29                                  ;   validate_decimal_digits.cpp, display_array.cpp                                          *
    30                                  ;                                                                                           *
    31                                  ;********************************************************************************************
    32                                  ; This File                                                                                 *
    33                                  ;    Name:      manager.asm                                                                 *
    34                                  ;    Purpose:   To manage all the files in the program and call to functions input_array,   *
    35                                  ;               sum and display_array as needed.                                            *
    36                                  ;                                                                                           *
    37                                  ;********************************************************************************************
    38                                  
    39                                  extern printf
    40                                  extern scanf
    41                                  extern fill
    42                                  extern displayArray
    43                                  extern sum
    44                                  
    45                                  array_size equ 100                        ; Set capacity limit of array.
    46                                  
    47                                  global control                          ; Make function callable from other linked files.
    48                                  
    49                                  section .data
    50 00000000 57656C636F6D652074-         instructions db "Welcome to HSAS.  The accuracy and reliability of this program is guaranteed by Stefan Parrish.", 10, 0
    50 00000009 6F20485341532E2020-
    50 00000012 546865206163637572-
    50 0000001B 61637920616E642072-
    50 00000024 656C696162696C6974-
    50 0000002D 79206F662074686973-
    50 00000036 2070726F6772616D20-
    50 0000003F 69732067756172616E-
    50 00000048 746565642062792053-
    50 00000051 746566616E20506172-
    50 0000005A 726973682E0A00     
    51                                  
    52 00000061 596F75206861766520-         numElements db "You have entered %d numbers.", 10, 0
    52 0000006A 656E74657265642025-
    52 00000073 64206E756D62657273-
    52 0000007C 2E0A00             
    53 0000007F 5468652073756D206F-         sumFormat   db "The sum of the %d numbers in this array is %5.8lf.", 10, 0
    53 00000088 662074686520256420-
    53 00000091 6E756D626572732069-
    53 0000009A 6E2074686973206172-
    53 000000A3 726179206973202535-
    53 000000AC 2E386C662E0A00     
    54 000000B3 54686520636F6E7472-         sumPrompt   db "The control module will now return the sum to the caller module.", 10, 0
    54 000000BC 6F6C206D6F64756C65-
    54 000000C5 2077696C6C206E6F77-
    54 000000CE 2072657475726E2074-
    54 000000D7 68652073756D20746F-
    54 000000E0 207468652063616C6C-
    54 000000E9 6572206D6F64756C65-
    54 000000F2 2E0A00             
    55 000000F5 256C6400                    floatFormat db "%ld", 0 
    56 000000F9 256C660A00                  outputDbl   db "%lf", 10, 0
    57                                  
    58                                  section .bss
    59 00000000 <res 00000320>              floatArray: resq 100                  ; Reserve space for uninitialized array based on array_size above.
    60                                  
    61                                  section .text
    62                                  
    63                                  control:
    64                                  
    65                                  ; Back up all registers and set stack pointer to base pointer
    66 00000000 55                      push rbp
    67 00000001 4889E5                  mov rbp, rsp
    68 00000004 57                      push rdi
    69 00000005 56                      push rsi
    70 00000006 52                      push rdx
    71 00000007 51                      push rcx
    72 00000008 4150                    push r8
    73 0000000A 4151                    push r9
    74 0000000C 4152                    push r10
    75 0000000E 4153                    push r11
    76 00000010 4154                    push r12
    77 00000012 4155                    push r13
    78 00000014 4156                    push r14
    79 00000016 4157                    push r15
    80 00000018 53                      push rbx
    81 00000019 9C                      pushf
    82                                  
    83 0000001A 6A00                    push qword 0                            ; Extra push to create even number of pushes
    84                                  
    85                                  ;-------------------------------INSTRUCTION PROMPT------------------------------------------
    86                                  
    87 0000001C 6A00                    push qword 0
    88 0000001E B800000000              mov rax, 0                    
    89 00000023 48BF-                   mov rdi, instructions
    89 00000025 [0000000000000000] 
    90 0000002D E8(00000000)            call printf                             ; Print out intructionS prompt.
    91 00000032 58                      pop rax
    92                                  
    93                                  ;---------------------------CALL FUNCTION INPUT_ARRAY---------------------------------------
    94                                  
    95 00000033 48BF-                   mov rdi, floatArray                     ; Pass array into rdi register.
    95 00000035 [0000000000000000] 
    96 0000003D BE64000000              mov rsi, array_size                     ; Pass the max array size into rsi register.
    97 00000042 E8(00000000)            call fill                               ; Call funtion to input array.
    98 00000047 4989C6                  mov r14, rax                            ; Put number of elements in array in r14.
    99                                  
   100                                  ;-------------------------CONFIRM INPUTTED VALUES--------------------------------
   101                                  
   102                                  ;{ Print number of elements returned.
   103 0000004A 6A00                    push qword 0
   104 0000004C B801000000              mov rax, 1
   105 00000051 48BF-                   mov rdi, numElements
   105 00000053 [6100000000000000] 
   106 0000005B 4C89F6                  mov rsi, r14
   107 0000005E E8(00000000)            call printf
   108 00000063 58                      pop rax
   109                                  ;}
   110                                  
   111 00000064 49BF-                   mov r15, floatArray                     ; Put array into r15.
   111 00000066 [0000000000000000] 
   112 0000006E 41BD00000000            mov r13, 0                              ; Counter to iterate through array.
   113                                  
   114                                  ;{ Print each element afer it is entered in the array.
   115                                  ; push qword 0
   116                                  ; movsd xmm10, [r15 + 8 * r13]
   117                                  ; mov rax, 1
   118                                  ; mov rdi, outputDbl  
   119                                  ; movsd xmm0, xmm10
   120                                  ; call printf
   121                                  ; pop rax
   122                                  ;}
   123                                  
   124                                  ;{ Print all the elements in the array.
   125                                  ; mov r9, 0
   126                                  
   127                                  ; print_loop:
   128                                  
   129                                  ; cmp r9, r14
   130                                  ; je exit
   131                                  
   132                                  ; movsd xmm10, [r15 + 8 * r9]
   133                                  
   134                                  ; push r9
   135                                  ; mov rax, 1
   136                                  ; mov rdi, outputDbl
   137                                  ; movsd xmm0, xmm10
   138                                  ; call printf
   139                                  ; pop r9
   140                                  
   141                                  ; inc r9
   142                                  ; jmp print_loop
   143                                  ;}
   144                                  
   145                                  ;----------------------------DISPLAY ELEMENTS OF ARRAY--------------------------------------
   146                                  ; Calls display_array that prints out each integer in the array seperated by 1 space.
   147                                  
   148 00000074 6A00                    push qword 0
   149 00000076 48BF-                   mov qword rdi, floatArray               ; Pass the array as first parameter.
   149 00000078 [0000000000000000] 
   150 00000080 4C89F6                  mov qword rsi, r14                      ; Pass # of elements in the array stored in r14.
   151 00000083 E8(00000000)            call displayArray                       ; Call display_array function.
   152 00000088 58                      pop rax
   153                                  
   154                                  ;-----------------------------------CALLS SUM-----------------------------------------------
   155                                  ; Calls function sum to return the sum of integers in the array
   156                                  
   157 00000089 48BF-                   mov qword rdi, floatArray               ; Pass the array as first parameter.  
   157 0000008B [0000000000000000] 
   158 00000093 4C89F6                  mov qword rsi, r14                      ; Pass # of elements in the array stored in r14.
   159 00000096 B800000000              mov qword rax, 0
   160 0000009B E8(00000000)            call sum                                ; Function sum to add all the integers in array. 
   161 000000A0 F2440F10D8              movsd xmm11, xmm0
   162                                  
   163                                  ;--------------------------PRINTS OUT TOTAL # OF INTEGERS AND SUM--------------------------- 
   164                                  
   165 000000A5 6A00                    push qword 0
   166 000000A7 48BF-                   mov qword rdi, sumFormat
   166 000000A9 [7F00000000000000] 
   167 000000B1 4C89EA                  mov qword rdx, r13                      ; Pass the sum of integers in the array to print.
   168 000000B4 B802000000              mov qword rax, 2
   169 000000B9 F2410F10C3              movsd xmm0, xmm11
   170 000000BE E8(00000000)            call printf                             ; Print out # of elements & sum
   171 000000C3 58                      pop rax
   172                                  
   173                                  ;---------------------------------PRINTS OUT SUMPROMPT-------------------------------------- 
   174                                  
   175 000000C4 B800000000              mov rax, 0                    
   176 000000C9 48BF-                   mov rdi, sumPrompt
   176 000000CB [B300000000000000] 
   177 000000D3 E8(00000000)            call printf                             ; Print out that sum will be returned to main.
   178                                  
   179                                  ;---------------------------------END OF FILE-----------------------------------------------
   180                                  exit:
   181                                  
   182                                  ; Restore all registers to their original state.
   183 000000D8 58                      pop rax                                 ; Remove extra push from stack.
   184 000000D9 F2410F10C3              movsd xmm0, xmm11                       ; Return sum.
   185 000000DE 9D                      popf                                                 
   186 000000DF 5B                      pop rbx                                                     
   187 000000E0 415F                    pop r15                                                     
   188 000000E2 415E                    pop r14                                                      
   189 000000E4 415D                    pop r13                                                      
   190 000000E6 415C                    pop r12                                                      
   191 000000E8 415B                    pop r11                                                     
   192 000000EA 415A                    pop r10                                                     
   193 000000EC 4159                    pop r9                                                      
   194 000000EE 4158                    pop r8                                                      
   195 000000F0 59                      pop rcx                                                     
   196 000000F1 5A                      pop rdx                                                     
   197 000000F2 5E                      pop rsi                                                     
   198 000000F3 5F                      pop rdi                                                     
   199 000000F4 5D                      pop rbp
   200                                  
   201 000000F5 C3                      ret
