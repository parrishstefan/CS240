     1                                  ;********************************************************************************************
     2                                  ; Program name:          Sum of Integers - Array                                            *
     3                                  ; Programming Language:  x86 Assembly                                                       *
     4                                  ; Program Description:   This program asks a user to input integers into an array and       *
     5                                  ;                        returns the sum of integers in the array.                          *
     6                                  ;                                                                                           *
     7                                  ;********************************************************************************************
     8                                  ; Author Information:                                                                       *
     9                                  ; Name:         Bilal El-haghassan                                                          *
    10                                  ; Email:        bilalelhaghassan@csu.fullerton.edu                                          *    
    11                                  ; Institution:  California State University - Fullerton                                     *
    12                                  ; Course:       CPSC 240-05 Assembly Language                                               *
    13                                  ;                                                                                           *
    14                                  ;********************************************************************************************
    15                                  ; Copyright (C) 2020 Bilal El-haghassan                                                     *
    16                                  ; This program is free software: you can redistribute it and/or modify it under the terms   * 
    17                                  ; of the GNU General Public License version 3 as published by the Free Software Foundation. * 
    18                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
    19                                  ; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * 
    20                                  ; See the GNU General Public License for more details. A copy of the GNU General Public     *
    21                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    22                                  ;                                                                                           *
    23                                  ;********************************************************************************************
    24                                  ; Program information                                                                       *
    25                                  ;   Program name: Sum of Integers - Array                                                   *
    26                                  ;   Programming languages: One module in C, Four modules in X86, Two modules in c++         *
    27                                  ;   Files in this program: manager.asm, input_array.asm, sum.asm, atol.asm, main.c,         *   
    28                                  ;   					   validate_decimal_digits.cpp, display_array.cpp                   *
    29                                  ;                                                                                           *
    30                                  ;********************************************************************************************
    31                                  ; This File                                                                                 *
    32                                  ;    Name:      sum.asm                                                                     *
    33                                  ;    Purpose:   To add up all the integers in the array and return the sum back to manager. *
    34                                  ;                                                                                           *
    35                                  ;********************************************************************************************
    36                                  
    37                                  global sum                             ; Makes function callable from other linked files.
    38                                  extern printf
    39                                  
    40                                  section .data  
    41                                  
    42 00000000 53756D3A20256C660A-     outputDbl db "Sum: %lf",10,0
    42 00000009 00                 
    43                                  
    44 0000000A 00000000                giveZero dd 0
    45                                  
    46                                  section .bss
    47                                  
    48                                  section .text
    49                                  
    50                                  global sumofsquares
    51                                  
    52                                  sumofsquares:
    53 00000000 55                      push rbp
    54                                  
    55 00000001 6AFF                    push qword -1
    56                                  
    57 00000003 4989FF                  mov r15, rdi
    58 00000006 4989F6                  mov r14, rsi
    59 00000009 41BD00000000            mov r13, 0
    60 0000000F 41BC00000000            mov r12, 0
    61 00000015 F2440F101C25-           movsd xmm11, [giveZero]
    61 0000001B [0A000000]         
    62 0000001F F2440F101425-           movsd xmm10, [giveZero]
    62 00000025 [0A000000]         
    63                                  
    64                                  begin_lop:
    65                                  
    66 00000029 4D39F4                  cmp r12, r14
    67 0000002C 7D16                    jge end_loop
    68                                  
    69 0000002E F2470F5814E7            addsd xmm10, [r15 + 8 * r12]
    70 00000034 F2470F5914E7            mulsd xmm10, [r15 + 8 * r12]
    71 0000003A F2450F10DA              movsd xmm11, xmm10
    72 0000003F 49FFC4                  inc r12
    73                                  
    74 00000042 EBE5                    jmp begin_lop
    75                                  
    76                                  end_loop:
    77 00000044 F2410F10C3              movsd xmm0, xmm11
    78                                  
    79                                  sum:
    80                                  
    81                                  ; Back up all registers to stack and set stack pointer to base pointer
    82 00000049 55                      push rbp
    83 0000004A 4889E5                  mov rbp, rsp
    84 0000004D 57                      push rdi
    85 0000004E 56                      push rsi
    86 0000004F 52                      push rdx
    87 00000050 51                      push rcx
    88 00000051 4150                    push r8
    89 00000053 4151                    push r9
    90 00000055 4152                    push r10
    91 00000057 4153                    push r11
    92 00000059 4154                    push r12
    93 0000005B 4155                    push r13
    94 0000005D 4156                    push r14
    95 0000005F 4157                    push r15
    96 00000061 53                      push rbx
    97 00000062 9C                      pushf
    98                                  
    99 00000063 6AFF                    push qword -1                           ; Extra push onto stack to make even # of pushes.
   100                                  
   101 00000065 4989FF                  mov r15, rdi                            ; Copies array that was passed to r15.
   102 00000068 4989F6                  mov r14, rsi                            ; Copies number of elements in the array to r14.
   103 0000006B 41BD00000000            mov r13, 0                              ; Sum register to add elements of array to.
   104 00000071 41BC00000000            mov r12, 0                              ; Counter to to iterate through array.
   105 00000077 F2440F101C25-           movsd xmm11, [giveZero]
   105 0000007D [0A000000]         
   106                                  
   107                                  ;-----------------------------------START LOOP----------------------------------------------
   108                                  begin_loop:
   109                                  
   110                                  ; Compares the counter (r12) to the number of elements in the array (r14).
   111 00000081 4D39F4                  cmp r12, r14                        
   112 00000084 7D0B                    jge outofloop
   113                                  
   114                                  ;--------------------------------COPY INTO ARRAY--------------------------------------------
   115                                  ; Adds element of array at index of r12 to the Sum of register r13.
   116 00000086 F2470F581CE7            addsd xmm11, [r15 + 8 * r12]            
   117 0000008C 49FFC4                  inc r12                                 ; Increments counter r12 by 1.
   118                                  
   119                                  ; Restarts loop
   120 0000008F EBF0                    jmp begin_loop          
   121                                  
   122                                  ;----------------------------------END OF LOOP----------------------------------------------
   123                                  outofloop:
   124                                  
   125                                  ;{ OUTPUTS SUM
   126 00000091 B801000000              mov rax, 1
   127 00000096 48BF-                   mov rdi, outputDbl
   127 00000098 [0000000000000000] 
   128 000000A0 F2410F10C3              movsd xmm0, xmm11
   129 000000A5 E8(00000000)            call printf
   130                                  ;}
   131                                  
   132 000000AA F2410F10C3              movsd xmm0, xmm11
   133                                  
   134                                  ; Restores all backed up registers to their original state.
   135 000000AF 58                      pop rax                                ; Remove extra push of -1 from stack.
   136 000000B0 9D                      popf                                                       
   137 000000B1 5B                      pop rbx                                                     
   138 000000B2 415F                    pop r15                                                     
   139 000000B4 415E                    pop r14                                                      
   140 000000B6 415D                    pop r13                                                      
   141 000000B8 415C                    pop r12                                                      
   142 000000BA 415B                    pop r11                                                     
   143 000000BC 415A                    pop r10                                                     
   144 000000BE 4159                    pop r9                                                      
   145 000000C0 4158                    pop r8                                                      
   146 000000C2 59                      pop rcx                                                     
   147 000000C3 5A                      pop rdx                                                     
   148 000000C4 5E                      pop rsi                                                     
   149 000000C5 5F                      pop rdi                                                     
   150 000000C6 5D                      pop rbp
   151                                  
   152 000000C7 C3                      ret
