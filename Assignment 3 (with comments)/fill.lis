     1                                  ;********************************************************************************************
     2                                  ; Program name:          Sum of Integers - Array                                            *
     3                                  ; Programming Language:  x86 Assembly                                                       *
     4                                  ; Program Description:   This program asks a user to input integers into an array and       *
     5                                  ;                        returns the sum of integers in the array.                          *
     6                                  ;                                                                                           *
     7                                  ;********************************************************************************************
     8                                  ; Author Information:                                                                       *
     9                                  ; Name:         Bilal El-haghassan                                                          *
    10                                  ; Email:        bilalelhaghassan@csu.fullerton.edu                                          *    
    11                                  ; Institution:  California State University - Fullerton                                     *
    12                                  ; Course:       CPSC 240-05 Assembly Language                                               *
    13                                  ;                                                                                           *
    14                                  ;********************************************************************************************
    15                                  ; Copyright (C) 2020 Bilal El-haghassan                                                     *
    16                                  ; This program is free software: you can redistribute it and/or modify it under the terms   * 
    17                                  ; of the GNU General Public License version 3 as published by the Free Software Foundation. * 
    18                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
    19                                  ; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * 
    20                                  ; See the GNU General Public License for more details. A copy of the GNU General Public     *
    21                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    22                                  ;                                                                                           *
    23                                  ;********************************************************************************************
    24                                  ; Program information                                                                       *
    25                                  ;   Program name: Sum of Integers - Array                                                   *
    26                                  ;   Programming languages: One module in C, Four modules in X86, Two modules in c++         *
    27                                  ;   Files in this program: manager.asm, input_array.asm, sum.asm, atol.asm, main.c,         *   
    28                                  ;   					   validate_decimal_digits.cpp, display_array.cpp                   *
    29                                  ;                                                                                           *
    30                                  ;********************************************************************************************
    31                                  ; This File                                                                                 *
    32                                  ;    Name:      input_array.asm                                                             *
    33                                  ;    Purpose:   To accept a users input of integers and save it into an array then send     *
    34                                  ;               the total number of elements inputed into the array back to manager.        *
    35                                  ;                                                                                           *
    36                                  ;********************************************************************************************
    37                                  
    38                                  extern printf
    39                                  extern scanf
    40                                  
    41                                  global fill                       ; Makes function callable from other linked files.
    42                                  
    43                                  section .data
    44 00000000 256C6600                    inputDbl       db "%lf", 0
    45 00000004 256C660A00                  outputDbl      db "%lf", 10, 0
    46 00000009 5B25642C2025645D3A-         outputArray    db "[%d, %d]: %lf", 10, 0
    46 00000012 20256C660A00       
    47 00000018 4E756D626572206F66-         outputNum      db "Number of elements: %d", 10, 0
    47 00000021 20656C656D656E7473-
    47 0000002A 3A2025640A00       
    48                                  
    49                                  section .bss
    50                                  
    51                                  section .text
    52                                  
    53                                  fill:
    54                                  
    55                                  ; Back up all registers and set stack pointer to base pointer
    56 00000000 55                      push rbp
    57 00000001 4889E5                  mov rbp, rsp
    58 00000004 57                      push rdi
    59 00000005 56                      push rsi
    60 00000006 52                      push rdx
    61 00000007 51                      push rcx
    62 00000008 4150                    push r8
    63 0000000A 4151                    push r9
    64 0000000C 4152                    push r10
    65 0000000E 4153                    push r11
    66 00000010 4154                    push r12
    67 00000012 4155                    push r13
    68 00000014 4156                    push r14
    69 00000016 4157                    push r15
    70 00000018 53                      push rbx
    71                                  
    72 00000019 6AFF                    push qword -1                           ; Extra push to create even number of pushes
    73                                  
    74                                  ;-----------------------------INITIALIZE PARAMETERS-----------------------------------------
    75 0000001B 4989FF                  mov r15, rdi                      ; Address of array saved to r15.
    76 0000001E 4989F6                  mov r14, rsi                      ; Max number of elements allowed in array.
    77 00000021 41BD00000000            mov r13, 0                        ; Counter to iterate through array.
    78                                  
    79                                  ;---------------------------------START OF LOOP---------------------------------------------
    80                                  begin_loop:
    81                                  
    82                                  ; Scanf function called to take user input.
    83 00000027 6A00                    push qword 0
    84 00000029 B800000000              mov rax, 0
    85 0000002E 48BF-                   mov rdi, inputDbl  
    85 00000030 [0000000000000000] 
    86 00000038 4889E6                  mov rsi, rsp                            ; Stack pointer points to where scanf outputs
    87 0000003B E8(00000000)            call scanf
    88 00000040 F2440F101C24            movsd xmm11, [rsp]
    89 00000046 4158                    pop r8
    90                                  
    91                                  ; Test if Control + D is entered to finish inputting into array.
    92 00000048 4898                    cdqe
    93 0000004A 4883F8FF                cmp rax, -1                          
    94 0000004E 744C                    je end_loop                             ; Exit loop if control + D is pressed.
    95                                  
    96                                  ;{ Print each number as it is entered.
    97 00000050 6A00                    push qword 0
    98 00000052 B801000000              mov rax, 1
    99 00000057 48BF-                   mov rdi, outputDbl  
    99 00000059 [0400000000000000] 
   100 00000061 F2410F10C3              movsd xmm0, xmm11
   101 00000066 E8(00000000)            call printf
   102 0000006B 58                      pop rax
   103                                  ;}
   104                                  
   105                                  ;--------------------------------COPY INTO ARRAY--------------------------------------------
   106 0000006C F2470F111CEF            movsd [r15 + 8 * r13], xmm11            ; Copy user input into array at index r13.
   107                                  
   108                                  ;{ Print each element afer it is entered in the array.
   109 00000072 6A00                    push qword 0
   110 00000074 F2470F1014EF            movsd xmm10, [r15 + 8 * r13]
   111 0000007A B801000000              mov rax, 1
   112 0000007F 48BF-                   mov rdi, outputDbl  
   112 00000081 [0400000000000000] 
   113 00000089 F2410F10C2              movsd xmm0, xmm10
   114 0000008E E8(00000000)            call printf
   115 00000093 58                      pop rax
   116                                  ;}
   117                                  
   118 00000094 49FFC5                  inc r13                                 ; Increment array index.
   119                                  
   120                                  ;-----------------------------ARRAY CAPACITY TEST-------------------------------------------
   121                                  ; Test to see if max array capacity has been reached.
   122 00000097 4D39F5                  cmp r13, r14
   123 0000009A 758B                    jne begin_loop                          ; Loop until R13=R14.
   124                                  
   125                                  ;---------------------------------END OF LOOP-----------------------------------------------
   126                                  end_loop:
   127                                  
   128                                  ;{ Print number of elements in the array.
   129 0000009C 6A00                    push qword 0
   130 0000009E B801000000              mov rax, 1
   131 000000A3 48BF-                   mov rdi, outputNum
   131 000000A5 [1800000000000000] 
   132 000000AD 4C89EE                  mov rsi, r13
   133 000000B0 E8(00000000)            call printf
   134 000000B5 58                      pop rax
   135                                  ;}
   136                                  
   137                                  ;{ Print all the elements in the array.
   138 000000B6 41B900000000            mov r9, 0
   139                                  
   140                                  print_loop:
   141                                  
   142 000000BC 4D39E9                  cmp r9, r13
   143 000000BF 742E                    je exit
   144                                  
   145 000000C1 F2470F1014CF            movsd xmm10, [r15 + 8 * r9]
   146                                  
   147 000000C7 4151                    push r9
   148 000000C9 B803000000              mov rax, 3
   149 000000CE 48BF-                   mov rdi, outputArray
   149 000000D0 [0900000000000000] 
   150 000000D8 4C89CE                  mov rsi, r9
   151 000000DB 4C89EA                  mov rdx, r13
   152 000000DE F2410F10C2              movsd xmm0, xmm10
   153 000000E3 E8(00000000)            call printf
   154 000000E8 4159                    pop r9
   155                                  
   156 000000EA 49FFC1                  inc r9
   157 000000ED EBCD                    jmp print_loop
   158                                  ;}
   159                                  
   160                                  ;------------------------------------EXIT---------------------------------------------------
   161                                  exit:
   162                                  
   163                                  ; Restore all backed up registers to their original state.
   164 000000EF 58                      pop rax                                 ; Remove extra push of -1 from stack.
   165 000000F0 4C89E8                  mov rax, r13                            ; Copy # of elements in r13 to rax.
   166                                  
   167 000000F3 5B                      pop rbx                                                     
   168 000000F4 415F                    pop r15                                                     
   169 000000F6 415E                    pop r14                                                      
   170 000000F8 415D                    pop r13                                                      
   171 000000FA 415C                    pop r12                                                      
   172 000000FC 415B                    pop r11                                                     
   173 000000FE 415A                    pop r10                                                     
   174 00000100 4159                    pop r9                                                      
   175 00000102 4158                    pop r8                                                      
   176 00000104 59                      pop rcx                                                     
   177 00000105 5A                      pop rdx                                                     
   178 00000106 5E                      pop rsi                                                     
   179 00000107 5F                      pop rdi                                                     
   180 00000108 5D                      pop rbp
   181                                  
   182 00000109 C3                      ret
