     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "String I/O Demonstration".  This program demonstrates how to input and output a string with embedded white  *
     3                                  ;space.  Copyright (C) 2017  Floyd Holliday                                                                                 *
     4                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     5                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     6                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     7                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     8                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
     9                                  ;****************************************************************************************************************************
    10                                  
    11                                  
    12                                  
    13                                  
    14                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    15                                  ;Author information
    16                                  ;  Author name: Floyd Holliday
    17                                  ;  Author email: holliday@fullerton.edu or activeprofessor@yahoo.com or both
    18                                  ;
    19                                  ;Program information
    20                                  ; Program name: String I/O
    21                                  ;  Programming languages X86 with one module in C++
    22                                  ;  Date program began 2017-Dec-29
    23                                  ;  Date program completed 2017-Dec-30
    24                                  ;
    25                                  ;Purpose
    26                                  ;  This program will serve to introduce X86 programming to new programmers.
    27                                  ;
    28                                  ;Project information
    29                                  ;  Files: good_morning.cpp, hello.asm, run.sh
    30                                  ;  Status: The program has been tested extensively with no detectable errors.
    31                                  ;
    32                                  ;Translator information
    33                                  ;  Linux: nasm -f elf64 -l hello.lis -o hello.o hello.asm
    34                                  ;References and credits
    35                                  ;  Seyfarth, Chapter 11
    36                                  
    37                                  ;Format information
    38                                  ;  Page width: 172 columns
    39                                  ;  Begin comments: 61
    40                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    41                                  ;
    42                                  ;===== Begin code area ====================================================================================================================================================
    43                                  
    44                                  ;%include "savedata.inc"                                     ;Not used in this program.  External macros that assist in data backup.
    45                                  
    46                                  ;%include "debug.inc"                                        ;Not now in use.  The debug tool was used during the development stages of this program.
    47                                  
    48                                  extern printf                                               ;External C++ function for writing to standard output device
    49                                  
    50                                  extern scanf                                                ;External C++ function for reading from the standard input device
    51                                  
    52                                  extern fgets
    53                                  
    54                                  extern stdin
    55                                  
    56                                  global hello_world                                          ;This makes hello_world callable by functions outside of this file.
    57                                  
    58                                  segment .data                                               ;Place initialized data here
    59                                  
    60                                  ;===== Declare some messages ==============================================================================================================================================
    61                                  ;The identifiers in this segment are quadword pointers to ascii strings stored in heap space.  They are not variables.  They are not constants.  There are no constants in
    62                                  ;assembly programming.  There are no variables in assembly programming: the registers assume the role of variables.
    63                                  
    64                                  align 16                                                   ;Insure that the next data declaration starts on a 16-byte boundary.
    65                                  
    66 00000000 48656C6C6F2070726F-     hello_world.initialmessage db "Hello programmer", 10, 0
    66 00000009 6772616D6D65720A00 
    67                                  
    68 00000012 576861742069732079-     hello_world.promptmessage db "What is your name? ", 0
    68 0000001B 6F7572206E616D653F-
    68 00000024 2000               
    69                                  
    70 00000026 4974206973206E6963-     hello_world.outputmessage db "It is nice to meet you ", 0
    70 0000002F 6520746F206D656574-
    70 00000038 20796F752000       
    71                                  
    72 0000003E 4920686F706520746F-     goodbye db "I hope to meet you again.  Enjoy your X86 programming.", 10, 0
    72 00000047 206D65657420796F75-
    72 00000050 20616761696E2E2020-
    72 00000059 456E6A6F7920796F75-
    72 00000062 72205838362070726F-
    72 0000006B 6772616D6D696E672E-
    72 00000074 0A00               
    73                                  
    74 00000076 257300                  stringformat db "%s", 0                                     ;general string format
    75 00000079 90<rept>                align 64                                                    ;Insure that the next data declaration starts on a 64-byte boundary.
    76                                  segment .bss                                                ;Declare pointers to un-initialized space in this segment.
    77                                  
    78 00000000 <res 00000020>          hello_world.programmers_name resb 32                        ;Create space of size 32 bytes
    79                                  
    80                                  ;==========================================================================================================================================================================
    81                                  ;===== Begin the application here: show how to input and output strings ===================================================================================================
    82                                  ;==========================================================================================================================================================================
    83                                  
    84                                  segment .text                                               ;Place executable instructions in this segment.
    85                                  
    86                                  hello_world:                                                ;Entry point.  Execution begins here.
    87                                  
    88                                  ;The next two instructions should be performed at the start of every assembly program.
    89 00000000 55                      push       rbp                                              ;This marks the start of a new stack frame belonging to this execution of this function.
    90 00000001 4889E5                  mov        rbp, rsp                                         ;rbp holds the address of the start of this new stack frame.  When this function returns to its caller rbp must
    91                                                                                              ;hold the same value it holds now.
    92                                  
    93                                  ;=========== Show the initial message =====================================================================================================================================
    94                                  ;Note that at this point there are no vital data in registers to be saved.  Therefore, there is no back up process at this time.
    95                                  
    96 00000004 B800000000              mov qword  rax, 0                                           ;No data from SSE will be printed
    97 00000009 48BF-                   mov        rdi, stringformat                                ;"%s"
    97 0000000B [7600000000000000] 
    98 00000013 48BE-                   mov        rsi, .initialmessage                             ;"Hello programmer"
    98 00000015 [0000000000000000] 
    99 0000001D E8(00000000)            call       printf                                           ;Call a C library function to make the output
   100                                  
   101                                  ;=========== Prompt for programmer's name =================================================================================================================================
   102                                  
   103 00000022 B800000000              mov qword  rax, 0                                           ;No data from SSE will be printed
   104 00000027 48BF-                   mov        rdi, stringformat                                ;"%s"
   104 00000029 [7600000000000000] 
   105 00000031 48BE-                   mov        rsi, .promptmessage                              ;"What is your name? "
   105 00000033 [1200000000000000] 
   106 0000003B E8(00000000)            call       printf                                           ;Call a library function to make the output
   107                                  
   108                                  ;===== Obtain the user's name =============================================================================================================================================
   109                                  
   110                                  ;------------Old style---------------------------------------------------------------------------------------------------------------------------------------|
   111                                  ;mov qword  rax, 0                                          ;SSE is not involved in this scanf operation                                                     |
   112                                  ;mov        rdi, stringformat                               ;"%s"                                                                                            |
   113                                  ;mov        rsi, hello_world.programmers_name               ;Give scanf a pointer to the reserved storage                                                    |
   114                                  ;call       scanf                                           ;Call a library function to do the input the string; however, this function stops on white space.|
   115                                  ;-----------End of old style---------------------------------------------------------------------------------------------------------------------------------|
   116                                  
   117 00000040 B800000000              mov qword rax, 0                                            ;SSE is not involved in this scanf operation
   118 00000045 48BF-                   mov       rdi, hello_world.programmers_name                 ;Copy to rdi the pointer to the start of the array of 32 bytes
   118 00000047 [0000000000000000] 
   119 0000004F BE20000000              mov       rsi, 32                                           ;Provide to fgets the size of the storage made available for input
   120 00000054 488B1425[00000000]      mov       rdx, [stdin]                                      ;stdin is a pointer to the device; rdx receives the device itself
   121 0000005C E8(00000000)            call      fgets                                             ;Call the C function to get a line of text and stop when NULL is encountered or 31 chars have been stored.
   122                                  
   123                                  ;===== Reply to the user ==================================================================================================================================================
   124                                  
   125 00000061 B800000000              mov        rax, 0                                           ;No data from SSE will be printed
   126 00000066 48BF-                   mov        rdi, stringformat                                ;"%s"
   126 00000068 [7600000000000000] 
   127 00000070 48BE-                   mov        rsi, hello_world.outputmessage                   ;"It is nice to meet you "
   127 00000072 [2600000000000000] 
   128 0000007A E8(00000000)            call       printf                                           ;Call a library function to do the output
   129                                  
   130 0000007F B800000000              mov        rax, 0                                           ;No data from SSE will be printed
   131 00000084 48BF-                   mov        rdi, stringformat                                ;"%s"
   131 00000086 [7600000000000000] 
   132 0000008E 48BE-                   mov        rsi, .programmers_name                           ;Place a pointer to the programmer's name in rsi
   132 00000090 [0000000000000000] 
   133 00000098 E8(00000000)            call       printf                                           ;Call a library function to do the output
   134                                  
   135                                  ;======= Show farewell message ============================================================================================================================================
   136                                  
   137 0000009D B800000000              mov qword rax, 0                                            ;No data from SSE will be printed
   138 000000A2 48BF-                   mov       rdi, stringformat                                 ;"%s"
   138 000000A4 [7600000000000000] 
   139 000000AC 48BE-                   mov       rsi, goodbye                                      ;"I hope to meet you again.  Enjoy your X86 programming."
   139 000000AE [3E00000000000000] 
   140 000000B6 E8(00000000)            call      printf                                            ;Call a library function to do the output
   141                                  
   142                                  ;=========== Return a nice number, say 3.5, to the calling program ========================================================================================================
   143                                  
   144 000000BB 48B80000000000000C-     mov       rax, 0x400C000000000000                           ;The goal is to put a copy of 3.5 in xmm0
   144 000000C4 40                 
   145 000000C5 50                      push      rax                                               ;Now 3.5 is on top of the stack
   146 000000C6 F20F100424              movsd     xmm0, [rsp]                                       ;Now there is a copy of 3.0 in xmm0
   147 000000CB 58                      pop       rax                                               ;Return the stack to its former state
   148                                  
   149                                  ;===== Restore the pointer to the start of the stack frame before exiting from this function ==============================================================================
   150                                  
   151 000000CC 5D                      pop        rbp                                              ;Now the system stack is in the same state it was when this function began execution.
   152                                  
   153 000000CD C3                      ret                                                         ;Pop a qword from the stack into rip, and continue executing.
   154                                  ;========== End of program hello_world.asm ================================================================================================================================
   155                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
